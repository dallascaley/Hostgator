1) Open PowerShell with Admin access

2) CD to the location of you nginx stuff

   cd C:\Users\dalla\Repo\Hostgator\nginx\

3) Start nginx
  
   start nginx

4) Run this command to start PHP-CGI on port 9000:

   C:\php\php-cgi.exe -b 127.0.0.1:9000


ChatGPT remaining

✅ 4. Final Checklist for Remote Access

   🔓 Security Group

   In your EC2 instance’s security group, make sure there's an inbound rule allowing:

      Port: 3306
      Protocol: TCP

      Source: Your local IP address (X.X.X.X/32) or 0.0.0.0/0 (not recommended for production)

      (done 9/29/2025)

🔐 MariaDB User Privileges

Make sure you created a remote-accessible DB user:

CREATE USER 'wordpressuser'@'%' IDENTIFIED BY 'your_password';
GRANT ALL PRIVILEGES ON wordpress_db.* TO 'wordpressuser'@'%';
FLUSH PRIVILEGES;


You can also allow access from your specific IP instead of % for better security.

🧪 5. Test Remote Connection from Your Windows Machine

In Windows Command Prompt or PowerShell, run:

telnet your-ec2-ip 3306


If it connects (screen goes blank or you get a response), you're good.

If telnet is not installed, try:

Test-NetConnection your-ec2-ip -Port 3306

✅ 6. Update WordPress wp-config.php

Once confirmed, update your local site's wp-config.php:

define('DB_NAME', 'wordpress_db');
define('DB_USER', 'wordpressuser');
define('DB_PASSWORD', 'your_password');
define('DB_HOST', 'your-ec2-ip-address'); // Or public DNS


Then reload your local site (e.g., http://mysite.local).

Let me know what netstat -tulnp | grep 3306 shows, and I can confirm whether the EC2 MariaDB is correctly configured for remote access.


Alternate ChatGPT notes:

4. Handle WordPress URLs (IMPORTANT)

WordPress hardcodes the "Site URL" in the DB. So if the DB has https://www.mysite.com, your local site might break or redirect there.

Option A: Override site URL in wp-config.php

Add this to your local wp-config.php:

define('WP_HOME','http://local.mysite.com');
define('WP_SITEURL','http://local.mysite.com');


This overrides the database values.

5. Optional: Media/Uploads Handling

If your uploads (wp-content/uploads/) are not in Git, then you’ll either:

Need to sync them from EC2 to your local setup, or

Live-load them from production (e.g., via symlinks or using remote URLs).

⚠️ Important Caveats
❌ Shared Database Dangers

Using the same database for both environments means:

Any plugin activation, theme changes, settings tweaks, etc. you do locally will affect the live production site.

You can easily break the production site unintentionally.

Safer approach: Use a separate database copy locally.

You can do this by exporting the production DB and importing it locally:

# On EC2
mysqldump -u user -p your_db_name > dump.sql

# Transfer to local
scp ec2-user@your-ec2:/path/to/dump.sql .

# On local
mysql -u local_user -p local_db_name < dump.sql


Then update URLs using a tool like WP-CLI
 or a plugin like Better Search Replace.

wp search-replace 'https://www.mysite.com' 'http://local.mysite.com'

✅ Summary
Step	Task
✅	Set local.mysite.com to point to 127.0.0.1
✅	Set up a local web server (Apache/Nginx) to serve the WordPress site
✅	Clone the codebase
⚠️	Modify wp-config.php to point to the EC2 DB (carefully!)
⚠️	Override site URL via wp-config.php to avoid redirect issues
🔐	Open EC2 security group to allow remote DB access (only from your IP)
✅	Consider syncing uploads/media
❌	Avoid writing to shared DB — better to use a copy locally

Would you like help creating a script to sync the database or set up a local virtual host?